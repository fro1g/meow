import random
import re
from typing import List, Dict, Optional, Any
from datetime import datetime
from config.config import POST_TEMPLATES
from services.google_ai import GoogleAIService
from services.scraper import Scraper
from utils.text_processor import clean_text, format_message
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('post_generator.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class PostGenerator:
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–≥–∏
    EMOJI_MAP = {
        'advice': ['üí°', 'üåà', 'ü§î', 'üìù', 'üå±'],
        'default': ['üìå']
    }

    TAGS_MAP = {
        'advice': ['#—Å–æ–≤–µ—Ç', '#–ø–æ–ª–µ–∑–Ω–∞—è–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '#—Ä–∞–∑–≤–∏—Ç–∏–µ'],
        'default': ['#–∑–¥–æ—Ä–æ–≤—å–µ']
    }

    def __init__(self, ai_service: GoogleAIService, scraper: Scraper):
        self.ai_service = ai_service
        self.scraper = Scraper()

    def extract_key_points(self, text: str, max_points: int = 4, max_length: int = 150) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        """
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        text = re.sub(r'[\*_`\(\)\{\}]', '', text)
        text = re.sub(r'\*\*', '', text)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        strategies = [
            # –ü—Ä—è–º—ã–µ —Å–ø–∏—Å–∫–∏
            lambda t: re.findall(r'^[-‚Ä¢*]\s*(.{20,'+str(max_length)+'}[.!?])$', t, re.MULTILINE),
            
            # –°–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            lambda t: [
                sent.strip() for sent in re.split(r'[.!?]', t) 
                if 40 < len(sent.strip()) < max_length 
                and not sent.strip().startswith(('–í', '–ê', '–ò', '–ù–æ'))
            ]
        ]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
        key_points = []
        for strategy in strategies:
            points = strategy(text)
            points = [
                point.capitalize().strip('.') + '.'
                for point in points 
                if point.strip() and 20 < len(point) < max_length
            ]
            
            if points:
                key_points = points[:max_points]
                break
        
        return '\n‚Ä¢ ' + '\n‚Ä¢ '.join(key_points) if key_points else '–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'

    async def generate_ai_post(self, category: str, post_type: str = 'advice') -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç —Å –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π 
        –≤ –¥–≤—É—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö: —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∞–π—Ç–æ–≤ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ –ò–ò
        """
        try:
            # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            use_articles = random.choice([True, False])
            
            if use_articles:
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å–∏
                articles = await self.scraper.scrape_by_category(category or random.choice(['–∑–¥–æ—Ä–æ–≤—å–µ', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–ø–∏—Ç–∞–Ω–∏–µ']))
                
                if articles:
                    source_article = random.choice(articles)
                    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: {source_article['title']} –∏–∑ {len(articles)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
                    
                    # –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—å–∏
                    structure_prompt = f"""
                    –°–æ–∑–¥–∞–π –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Å—Ç–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –Ω–∞ —Å—Ç–∞—Ç—å–µ:
                    –ù–∞–∑–≤–∞–Ω–∏–µ: "{source_article['title']}"
                    –ò—Å—Ç–æ—á–Ω–∏–∫: {source_article['source_name']}

                    –°–æ–∑–¥–∞–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ ¬´–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–ª–∏–Ω–∏–∫–∏¬ª,/n
                    —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–∏ –¥–µ—Ç–µ–π —Å –î–¶–ü –∏ –∞—É—Ç–∏–∑–º–æ–º./n
                    –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π. /n
                    –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º, –æ—Ç–∫—Ä—ã—Ç–æ–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–º —Å—Ç–∏–ª–µ, –≤–∫–ª—é—á–∞—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã /n
                    –∏–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Ñ–∞–∫—Ç—ã. –í –∫–æ–Ω—Ü–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫.

                    –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
                    {source_article['content'][:500]}
                    """

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    unique_structure = await self.ai_service.generate_post(structure_prompt)

                    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                    content_prompt = f"""
                    –ù–∞–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏–∑ —Å—Ç–∞—Ç—å–∏:

                    –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {unique_structure}
                    –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç–∞—Ç—å—è: "{source_article['title']}"
                    –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏: {source_article['content'][:700]}

                    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
                    - –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                    - –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—É—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏
                    - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    """

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                    raw_content = await self.ai_service.generate_post(content_prompt)
                    
                    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
                    post_content = {
                        'source': source_article['source_name'],
                        'source_url': source_article.get('source_url', ''),
                    }
                    
                    disclaimer = "\n\n‚ö†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞. –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
                else:
                    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–ª–Ω–æ–π AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —Å—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    use_articles = False
            
            if not use_articles:
                # –ü–æ–ª–Ω–∞—è AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
                category = category or random.choice(['–∑–¥–æ—Ä–æ–≤—å–µ', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–ø–∏—Ç–∞–Ω–∏–µ', '—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ'])
                
                # –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                structure_prompt = f"""
                –°–æ–∑–¥–∞–π –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É "{category}".
                –°–æ–∑–¥–∞–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ ¬´–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–ª–∏–Ω–∏–∫–∏¬ª,/n
                —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–∏ –¥–µ—Ç–µ–π —Å –î–¶–ü –∏ –∞—É—Ç–∏–∑–º–æ–º. /n
                –ù–∞–π–¥–∏ –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É [–∑–∞–¥–∞–Ω–Ω–∞—è —Ç–µ–º–∞]./n
                –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–µ–º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö –∏–ª–∏ –≤–≤–æ–¥—è—â–∏—Ö –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ —Ç–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–º–Ω–µ–Ω–∏–π –≤ –æ–∫—Ä—É–∂–∞—é—â–µ–º./n
                –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–º —Å—Ç–∏–ª–µ. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫ —Å—Ç–∞—Ç—å–µ –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫—É.

                –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
                - –û–±—ä–µ–º: 500-700 —Å–∏–º–≤–æ–ª–æ–≤
                - –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: –†–æ–¥–∏—Ç–µ–ª–∏ –¥–µ—Ç–µ–π —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
                """

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                unique_structure = await self.ai_service.generate_post(structure_prompt)

                # –ü—Ä–æ–º–ø—Ç –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                content_prompt = f"""
                –ù–∞–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º:

                –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {unique_structure}
                –¢–µ–º–∞: {category}

                –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
                - –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                - –°–æ—Ö—Ä–∞–Ω—è—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
                - –ò–∑–±–µ–≥–∞—Ç—å –ø—Ä—è–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
                """

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                raw_content = await self.ai_service.generate_post(content_prompt)
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
                post_content = {
                    'source': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–ò',
                    'source_url': '',
                }
                
                disclaimer = "\n\n‚ö†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ò–ò. –¢—Ä–µ–±—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞."
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–≥–æ–≤
            all_emoji = ['üåà', 'üí°', '‚ù§Ô∏è', 'ü§ù', 'üåü', 'üîç', 'üì£', 'üíñ', 'üå±']
            all_tags = ['#–æ—Å–æ–±—ã–µ–¥–µ—Ç–∏', '#–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '#—Ä–∞–∑–≤–∏—Ç–∏–µ', '#–ª—é–±–æ–≤—å', '#–∑–∞–±–æ—Ç–∞', '#–≤–º–µ—Å—Ç–µ']
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –ø–æ—Å—Ç–∞
            final_post = (
                f"{random.choice(all_emoji)} {raw_content}\n\n"
                f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: {post_content['source']}\n"
                f"{' '.join(random.sample(all_tags, k=random.randint(1, 3)))}"
                f"{disclaimer}"
            )
            
            return format_message(final_post)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π: {str(e)}", exc_info=True)
            return None



