from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.google_ai import GoogleAIService
from services.scraper import Scraper
from database.db_manager import DBManager
from services.post_generator import PostGenerator
import asyncio
import logging

logger = logging.getLogger(__name__)

class AdminHandler:
    def __init__(self, ai_service: GoogleAIService, scraper: Scraper):
        self.ai_service = ai_service
        self.scraper = scraper
        self.post_generator = PostGenerator(self.ai_service, self.scraper)
        self.CHANNEL_ID = "@neurolife_clinic"  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

    async def generate_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
        """
        if update.effective_user.id not in context.bot_data.get('admin_ids', []):
            return

        status_message = await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...")

        try:
            post = await self.post_generator.generate_ai_post(
                category="parenting",
                post_type="advice"
            )

            if post:
                keyboard = [[
                    InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_ai"),
                    InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_ai")
                ]]
                
                context.user_data['current_post'] = post  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç

                await update.message.reply_text(
                    f"ü§ñ –ù–æ–≤—ã–π –ø–æ—Å—Ç:\n\n{post}",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                await status_message.delete()
            else:
                await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}", exc_info=True)
            await status_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
            
    async def edit_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        """
        query = update.callback_query
        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç –∏–∑ user_data
        current_post = context.user_data.get('current_post')
        
        if current_post:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            context.user_data['editing_post'] = True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            await query.message.reply_text(
                f"‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç –Ω–∏–∂–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{current_post}"
            )
        else:
            await query.message.reply_text("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
    async def handle_edited_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        """
        if context.user_data.get('editing_post'):
            edited_post = update.message.text

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [[
                InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_edited"),
                InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_again")
            ]]

            await update.message.reply_text(
                f"üñäÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:\n\n{edited_post}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

            context.user_data['current_post'] = edited_post
            context.user_data['editing_post'] = False
        
    async def publish_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
        """
        query = update.callback_query
        await query.answer()

        current_post = context.user_data.get('current_post')
        
        if current_post:
            try:
                # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
                await context.bot.send_message(
                    chat_id=self.CHANNEL_ID, 
                    text=current_post
                )
                await query.message.reply_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ")
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç
                context.user_data['current_post'] = None
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
        else:
            await query.message.reply_text("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")